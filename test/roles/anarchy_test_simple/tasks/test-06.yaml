---
#
# Test use case:
# - action with continue loop
# - delete with callback completion
# - delete cancels other activity
#
- name: Create AnarchyGovernor test-simple-06
  kubernetes.core.k8s:
    definition:
      apiVersion: anarchy.gpte.redhat.com/v1
      kind: AnarchyGovernor
      metadata:
        name: test-simple-06
        namespace: "{{ anarchy_namespace }}"
        labels:
          anarchy.gpte.redhat.com/test: simple
      spec:
        actions:
          cleanup:
            callbackHandlers:
              finished:
                tasks:
                - name: Finish action
                  anarchy_finish_action:
                    state: successful
            finishOnSuccessfulRun: false
            tasks:
            - debug:
                msg: "Waiting for callback..."
          loop:
            tasks:
            - anarchy_continue_action:
                after: 5s
        subjectEventHandlers:
          create:
            tasks:
            - anarchy_schedule_action:
                action: loop
          update:
            tasks:
            - when: start_delete | bool
              anarchy_subject_delete:
          delete:
            tasks:
            - anarchy_schedule_action:
                action: cleanup
        vars:
          start_delete: false

- name: Create AnarchySubject test-simple-06-a
  kubernetes.core.k8s:
    definition:
      apiVersion: anarchy.gpte.redhat.com/v1
      kind: AnarchySubject
      metadata:
        name: test-simple-06-a
        namespace: "{{ anarchy_namespace }}"
        labels:
          anarchy.gpte.redhat.com/test: simple
      spec:
        governor: test-simple-06

- name: Wait for AnarchySubject init for test-simple-06-a
  kubernetes.core.k8s_info:
    api_version: anarchy.gpte.redhat.com/v1
    kind: AnarchySubject
    name: test-simple-06-a
    namespace: "{{ anarchy_namespace }}"
  register: get_subject
  failed_when: >-
    get_subject.resources | default([]) | length != 1 or
    get_subject.resources[0].status.pendingActions != []
  until: get_action is successful
  retries: 10
  delay: 1

- name: Create AnarchySubject test-simple-06-a
  kubernetes.core.k8s:
    definition:
      apiVersion: anarchy.gpte.redhat.com/v1
      kind: AnarchySubject
      metadata:
        name: test-simple-06-a
        namespace: "{{ anarchy_namespace }}"
        labels:
          anarchy.gpte.redhat.com/test: simple
      spec:
        governor: test-simple-06

- name: Update AnarchySubject test-simple-06-a to trigger delete
  kubernetes.core.k8s:
    definition:
      apiVersion: anarchy.gpte.redhat.com/v1
      kind: AnarchySubject
      metadata:
        name: test-simple-06-a
        namespace: "{{ anarchy_namespace }}"
        labels:
          anarchy.gpte.redhat.com/test: simple
      spec:
        governor: test-simple-06
        vars:
          start_delete: true

- name: Wait AnarchyAction created to cleanup test-simple-06-a
  kubernetes.core.k8s_info:
    api_version: anarchy.gpte.redhat.com/v1
    kind: AnarchyAction
    label_selectors:
    - anarchy.gpte.redhat.com/action = cleanup
    - anarchy.gpte.redhat.com/governor = test-simple-06
    - anarchy.gpte.redhat.com/subject = test-simple-06-a
    namespace: "{{ anarchy_namespace }}"
  register: get_action
  failed_when: >-
    get_action.resources | default([]) | length != 1
  until: get_action is successful
  retries: 15
  delay: 1

- name: Send finish callback to AnarchyAction by event data
  vars:
    _action: "{{ get_action.resources[0] }}"
  uri:
    body:
      event: finished
    body_format: json
    headers:
      Authorization: "Bearer {{ _action.spec.callbackToken }}"
    method: POST
    url: "{{ anarchy_simulated_callback_base_url }}/action/{{ _action.metadata.name }}"
    validate_certs: false

- name: Wait for AnarchySubject for test-simple-06-a to complete deletion
  kubernetes.core.k8s_info:
    api_version: anarchy.gpte.redhat.com/v1
    kind: AnarchySubject
    name: test-simple-06-a
    namespace: "{{ anarchy_namespace }}"
  register: get_subject
  failed_when: >-
    get_subject.resources | default([]) | length != 0
  until: get_subject is successful
  retries: 10
  delay: 1
...
