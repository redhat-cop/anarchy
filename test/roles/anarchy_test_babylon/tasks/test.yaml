---
- name: Create AnarchySubject test-babylon-1
  k8s:
    apply: true
    state: present
    definition: "{{ lookup('template', 'subject.yaml.j2') | from_yaml }}"
  vars:
    _name: test-babylon-1
    _vars:
      desired_state: started
      job_vars:
        test_subject_var: test-1

- name: Check test-babylon-1 provision action
  k8s_info:
    api_version: anarchy.gpte.redhat.com/v1
    kind: AnarchyAction
    label_selectors:
    - anarchy.gpte.redhat.com/action=provision
    - anarchy.gpte.redhat.com/subject=test-babylon-1
  register: r_test_1_provision
  until:
  - r_test_1_provision.resources | default([]) | length == 1
  - r_test_1_provision.resources[0].spec.action == 'provision'
  - r_test_1_provision.resources[0].status is defined
  - r_test_1_provision.resources[0].status.callbackEvents is defined
  - r_test_1_provision.resources[0].status.callbackEvents | length == 1
  - r_test_1_provision.resources[0].status.callbackEvents[0].name == 'complete'
  retries: 40
  delay: 5

- name: Confirm test-babylon-1 subject state
  k8s_info:
    api_version: anarchy.gpte.redhat.com/v1
    kind: AnarchySubject
    name: test-babylon-1
    namespace: "{{ anarchy_namespace }}"
  register: r_test_1_subject
  until:
  - r_test_1_subject.resources[0].metadata.labels.state == 'started'
  - r_test_1_subject.resources[0].spec.vars.current_state == 'started'
  - r_test_1_subject.resources[0].status.towerJobs is defined
  - r_test_1_subject.resources[0].status.towerJobs.provision is defined
  - r_test_1_subject.resources[0].status.towerJobs.provision.deployerJob is defined
  retries: 5
  delay: 5

- name: Stop test-babylon-1 subject
  k8s:
    api_version: anarchy.gpte.redhat.com/v1
    kind: AnarchySubject
    name: test-babylon-1
    namespace: "{{ anarchy_namespace }}"
    merge_type: merge
    definition:
      spec:
        vars:
          desired_state: stopped

- name: Confirm test-babylon-1 subject stopped
  k8s_info:
    api_version: anarchy.gpte.redhat.com/v1
    kind: AnarchySubject
    name: test-babylon-1
    namespace: "{{ anarchy_namespace }}"
  register: r_test_1_subject
  until:
  - r_test_1_subject.resources[0].metadata.labels.state == 'stopped'
  - r_test_1_subject.resources[0].spec.vars.current_state == 'stopped'
  retries: 20
  delay: 5

- name: Start test-babylon-1 subject
  k8s:
    api_version: anarchy.gpte.redhat.com/v1
    kind: AnarchySubject
    name: test-babylon-1
    namespace: "{{ anarchy_namespace }}"
    merge_type: merge
    definition:
      spec:
        vars:
          desired_state: started

- name: Confirm test-babylon-1 subject started
  k8s_info:
    api_version: anarchy.gpte.redhat.com/v1
    kind: AnarchySubject
    name: test-babylon-1
    namespace: "{{ anarchy_namespace }}"
  register: r_test_1_subject
  until:
  - r_test_1_subject.resources[0].metadata.labels.state == 'started'
  - r_test_1_subject.resources[0].spec.vars.current_state == 'started'
  retries: 20
  delay: 5

- when: anarchy_test_delete_subjects | bool
  block:
  - name: Delete test-babylon-1 subject
    k8s:
      state: absent
      api_version: anarchy.gpte.redhat.com/v1
      kind: AnarchySubject
      name: test-babylon-1
      namespace: "{{ anarchy_namespace }}"

  - name: Verify AnarchySubject delete for test-babylon-1
    k8s_info:
      api_version: anarchy.gpte.redhat.com/v1
      kind: AnarchySubject
      name: test-babylon-1
      namespace: "{{ anarchy_namespace }}"
    register: r_get_test_babylon_1_subject
    failed_when: r_get_test_babylon_1_subject.resources | default([]) | length != 0
    until: r_get_test_babylon_1_subject is success
    retries: 20
    delay: 5

- name: Create AnarchySubject test-babylon-2
  k8s:
    apply: true
    state: present
    definition: "{{ lookup('template', 'subject.yaml.j2') | from_yaml }}"
  vars:
    _name: test-babylon-2
    _vars:
      desired_state: started
      tower_job_check_interval: 10s
      job_vars:
        simulate_job_result: failed

- name: Wait for test-babylon-2 subject provision-failed
  k8s_info:
    api_version: anarchy.gpte.redhat.com/v1
    kind: AnarchySubject
    name: test-babylon-2
    namespace: "{{ anarchy_namespace }}"
  register: r_test_subject
  until:
  - r_test_subject.resources[0].metadata.labels.state | default('') == 'provision-failed'
  - r_test_subject.resources[0].spec.vars.current_state | default('')  == 'provision-failed'
  retries: 20
  delay: 5

- name: Update AnarchySubject test-babylon-2 simulate_job_result successful
  vars:
    _patch:
      vars:
        job_vars:
          simulate_job_result: successful
    _spec: >-
      {{ r_test_subject.resources[0].spec | combine(_patch, recursive=true) }}
  k8s:
    api_version: anarchy.gpte.redhat.com/v1
    kind: AnarchySubject
    name: test-babylon-2
    namespace: "{{ anarchy_namespace }}"
    definition:
      metadata:
        annotations:
          # Make Anarchy ignore this update
          anarchy.gpte.redhat.com/spec-sha256: "{{ _spec | anarchy_spec_sha256 }}"
      spec: "{{ _spec }}"

- when: anarchy_test_delete_subjects | bool
  block:
  - name: Delete test-babylon-2 subject
    k8s:
      state: absent
      api_version: anarchy.gpte.redhat.com/v1
      kind: AnarchySubject
      name: test-babylon-2
      namespace: "{{ anarchy_namespace }}"

  - name: Verify AnarchySubject delete for test-babylon-2
    k8s_info:
      api_version: anarchy.gpte.redhat.com/v1
      kind: AnarchySubject
      name: test-babylon-2
      namespace: "{{ anarchy_namespace }}"
    register: r_get_test_babylon_2_subject
    failed_when: r_get_test_babylon_2_subject.resources | default([]) | length != 0
    until: r_get_test_babylon_2_subject is success
    retries: 20
    delay: 5

- name: Create AnarchySubject test-babylon-3
  k8s:
    apply: true
    state: present
    definition: "{{ lookup('template', 'subject.yaml.j2') | from_yaml }}"
  vars:
    _name: test-babylon-3
    _vars:
      desired_state: started
      tower_job_check_interval: 10s

- name: Wait for test-babylon-3 subject started
  k8s_info:
    api_version: anarchy.gpte.redhat.com/v1
    kind: AnarchySubject
    name: test-babylon-3
    namespace: "{{ anarchy_namespace }}"
  register: r_test_subject
  until:
  - r_test_subject.resources[0].metadata.labels.state | default('') == 'started'
  - r_test_subject.resources[0].spec.vars.current_state | default('')  == 'started'
  retries: 20
  delay: 5

- name: Update AnarchySubject test-babylon-3 to fail on destroy
  vars:
    _patch:
      vars:
        job_vars:
          simulate_job_result: failed
    _spec: >-
      {{ r_test_subject.resources[0].spec | combine(_patch, recursive=true) }}
  k8s:
    api_version: anarchy.gpte.redhat.com/v1
    kind: AnarchySubject
    name: test-babylon-3
    namespace: "{{ anarchy_namespace }}"
    definition:
      metadata:
        annotations:
          # Make Anarchy ignore this update
          anarchy.gpte.redhat.com/spec-sha256: "{{ _spec | anarchy_spec_sha256 }}"
      spec: "{{ _spec }}"

- name: Delete test-babylon-3 subject
  k8s:
    state: absent
    api_version: anarchy.gpte.redhat.com/v1
    kind: AnarchySubject
    name: test-babylon-3
    namespace: "{{ anarchy_namespace }}"

- name: Wait for test-babylon-3 subject destroy-failed
  k8s_info:
    api_version: anarchy.gpte.redhat.com/v1
    kind: AnarchySubject
    name: test-babylon-3
    namespace: "{{ anarchy_namespace }}"
  register: r_test_subject
  until:
  - r_test_subject.resources[0].metadata.labels.state | default('') == 'destroy-failed'
  - r_test_subject.resources[0].spec.vars.current_state | default('')  == 'destroy-failed'
  retries: 20
  delay: 5

- when: anarchy_test_delete_subjects | bool
  block:
  - name: Update AnarchySubject to complete delete
    k8s:
      api_version: anarchy.gpte.redhat.com/v1
      kind: AnarchySubject
      name: test-babylon-3
      namespace: "{{ anarchy_namespace }}"
      definition:
        spec:
          vars:
            force_delete: true

  - name: Verify AnarchySubject delete for test-babylon-3
    k8s_info:
      api_version: anarchy.gpte.redhat.com/v1
      kind: AnarchySubject
      name: test-babylon-3
      namespace: "{{ anarchy_namespace }}"
    register: r_get_test_babylon_3_subject
    failed_when: r_get_test_babylon_3_subject.resources | default([]) | length != 0
    until: r_get_test_babylon_3_subject is success
    retries: 20
    delay: 5
